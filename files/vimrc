"""""""""""""""""""""""
" File:   .vimrc
" Author: Adam Batten
" Year:   2021
"""""""""""""""""""""""

" Find the hame of the computer
let hostname = substitute(system('hostname'), '\n', '', '')

set nocompatible                   " don't be compatible with vi
syntax enable                      " Enable syntax highlighting
colorscheme monokai                " Use monokai colourscheme
set foldmethod=indent              " enable code folding
set foldlevel=99
set history=10000                  " How many lines to remember
set viminfo='500    
set expandtab                      " Tabs ARE spaces
set softtabstop=4                  " The number of spaces a TAB is when editing
set shiftwidth=4    
set autoindent                     " Automatically apply indentation
set smartindent
set ruler                          " Always show position
set showcmd                        " Show incomplete commands
set number                         " Line numbers
set relativenumber                 " Use relative line numbers
set colorcolumn=72,80              " Put a vertical line at 72 and 80 chars
set wildmenu                       " visual autocomplete for command menu
set showmatch                      " highlight matching [{()}]
set title
set backspace=indent,eol,start     " Backspace works like you would expect
set mouse=a                        " Enable mouse
set noerrorbells visualbell t_vb=  " Disable sound and audible bell errors
set vb
set t_vb="
set noerrorbells
set novisualbell
set ignorecase
set smartcase
set incsearch                      " Enable searching as you type
set tm=500                         " leader key timeout to be 0.5s
set spelllang=en
set spellfile=~/dotfiles/.vim/spell/en.utf-8.add


" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"""""""""""""""""""""""""""""""""""""""""""
""              PLUGINS
"""""""""""""""""""""""""""""""""""""""""""
call plug#begin()

Plug 'vim-scripts/indentpython.vim'
"Plug 'davidhalter/jedi-vim'
Plug 'ervandew/supertab'
Plug 'vim-syntastic/syntastic'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
Plug 'itchyny/vim-gitbranch'
Plug 'scrooloose/nerdtree' ", { 'on': 'NERDTreeToggle' }
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'machakann/vim-highlightedyank'
Plug 'andymass/vim-matchup'
Plug 'crusoexia/vim-monokai'
"Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'ycm-core/YouCompleteMe'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'preservim/nerdcommenter'      " <leader>cc to comment, <leader>cA to add a comment at the end of a line
"Plug 'klen/python-mode'

call plug#end()
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""
""          PLUGIN CONFIGURATION
"""""""""""""""""""""""""""""""""""""""""""

let g:SuperTabDefaultCompletionType = "contex"

"  Syntastic Configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open= 0
let g:syntastic_check_on_wq = 0

" Use for lightline package (pretty status bar)
set laststatus=2                   " Show the status bar
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }

"""""""""""""""""""""""""""""""""""""""""""
""              KEY REMAPPINGS
"""""""""""""""""""""""""""""""""""""""""""

" Split Navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <C-p> :Gfiles<CR>  " Remap Ctrl + P to fzf search Gfiles

nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

let mapleader = " "

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>
map <leader>t<leader> :tabnext<cr>

"  Open NERDTree with Ctrl + nt
map <leader>nt :NERDTreeToggle<cr>
nnoremap <leader>no :NERDTreeFocus<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

" Delete all white space with Ctrl + x
map <leader>xw :%s/\s\+$//g<CR>

map <leader>vs :vsplit
map <leader>gd <Plug>(coc-definition)
map <leader>gr <Plug>(coc-references)

"Enable folding with the spacebar
map <leader>f za

nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y gg"+yG

map <leader>sc :setlocal spell!<cr>


